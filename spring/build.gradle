plugins {
  id 'java'
  id 'org.springframework.boot' version "${springVersion}"
  id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
  id 'com.google.cloud.tools.jib' version "${jibVersion}"
}

group = 'com.sp1ke.budgi'

java {
  sourceCompatibility = '21'
}

configurations {
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

dependencies {
  annotationProcessor 'org.projectlombok:lombok'

  compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugVersion}"
  compileOnly 'org.projectlombok:lombok'

  implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
  implementation 'org.liquibase:liquibase-core'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-freemarker'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.modulith:spring-modulith-starter-core'
  implementation 'org.springframework.modulith:spring-modulith-starter-jpa'

  runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
  runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
  runtimeOnly 'org.postgresql:postgresql'
  runtimeOnly 'org.springframework.modulith:spring-modulith-actuator'

  testAnnotationProcessor 'org.projectlombok:lombok'

  testCompileOnly 'org.projectlombok:lombok'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.springframework.modulith:spring-modulith-starter-test'

  testRuntimeOnly 'com.h2database:h2'
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.modulith:spring-modulith-bom:${springModulithVersion}"
  }
}

test {
  useJUnitPlatform()
  jvmArgs("-XX:+EnableDynamicAgentLoading")
  testLogging {
    events = ["passed", "skipped", "failed"]
  }
}

def githubActor = System.getenv().getOrDefault('GITHUB_ACTOR', 'none')
def githubToken = System.getenv().getOrDefault('GITHUB_TOKEN', 'none')

jib {
  from {
    image = 'amazoncorretto:21-alpine'
  }
  to {
    image = 'ghcr.io/h4j4x/budgi'
    tags = ["$version", 'latest']
    auth {
      username = githubActor
      password = githubToken
    }
  }
  container {
    jvmFlags = ['-server', '-Xms512m', '-Xmx2g']
    mainClass = 'com.sp1ke.budgi.api.ApiApplication'
    creationTime = 'USE_CURRENT_TIMESTAMP'
    ports = ['8080']
    format = 'OCI'
  }
}
