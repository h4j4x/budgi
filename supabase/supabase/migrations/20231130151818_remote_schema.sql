create type "public"."transaction_type" as enum ('income', 'incomeTransfer', 'expense', 'expenseTransfer');

create type "public"."wallet_type" as enum ('cash', 'creditCard', 'debitCard');

create table "public"."transactions" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "code" character varying not null,
    "transaction_type" transaction_type not null,
    "wallet_id" bigint not null,
    "category_id" bigint not null,
    "user_id" uuid not null,
    "amount" double precision not null,
    "description" character varying not null
);


alter table "public"."transactions" enable row level security;

create table "public"."wallets" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "code" character varying not null,
    "wallet_type" wallet_type not null,
    "name" character varying not null,
    "user_id" uuid not null
);


alter table "public"."wallets" enable row level security;

CREATE UNIQUE INDEX transactions_code_user_id_ukey ON public.transactions USING btree (code, user_id);

CREATE UNIQUE INDEX transactions_pkey ON public.transactions USING btree (id);

CREATE INDEX transactions_transaction_type_idx ON public.transactions USING btree (transaction_type);

CREATE UNIQUE INDEX wallets_code_user_id_ukey ON public.wallets USING btree (code, user_id);

CREATE UNIQUE INDEX wallets_pkey ON public.wallets USING btree (id);

CREATE INDEX wallets_wallet_type_idx ON public.wallets USING btree (wallet_type);

alter table "public"."transactions" add constraint "transactions_pkey" PRIMARY KEY using index "transactions_pkey";

alter table "public"."wallets" add constraint "wallets_pkey" PRIMARY KEY using index "wallets_pkey";

alter table "public"."transactions" add constraint "transactions_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE RESTRICT not valid;

alter table "public"."transactions" validate constraint "transactions_category_id_fkey";

alter table "public"."transactions" add constraint "transactions_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE RESTRICT not valid;

alter table "public"."transactions" validate constraint "transactions_user_id_fkey";

alter table "public"."transactions" add constraint "transactions_wallet_id_fkey" FOREIGN KEY (wallet_id) REFERENCES wallets(id) ON DELETE RESTRICT not valid;

alter table "public"."transactions" validate constraint "transactions_wallet_id_fkey";

alter table "public"."wallets" add constraint "wallets_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE RESTRICT not valid;

alter table "public"."wallets" validate constraint "wallets_user_id_fkey";

create policy "Enable delete for users based on id"
on "public"."transactions"
as permissive
for delete
to authenticated
using ((auth.uid() = user_id));


create policy "Enable insert for authenticated users only"
on "public"."transactions"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable select for users based on id"
on "public"."transactions"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "Enable update for users based on id"
on "public"."transactions"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


create policy "Enable delete for users based on id"
on "public"."wallets"
as permissive
for delete
to authenticated
using ((auth.uid() = user_id));


create policy "Enable insert for authenticated users only"
on "public"."wallets"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable select for users based on id"
on "public"."wallets"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "Enable update for users based on id"
on "public"."wallets"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));



