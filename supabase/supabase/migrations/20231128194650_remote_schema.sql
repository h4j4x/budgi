create table "public"."categories_amounts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "category_id" bigint not null,
    "user_id" uuid not null,
    "amount" double precision not null,
    "from_date" date not null,
    "to_date" date not null
);


alter table "public"."categories_amounts" enable row level security;

CREATE INDEX categories_amounts_from_date_to_date_idx ON public.categories_amounts USING btree (from_date, to_date);

CREATE UNIQUE INDEX categories_amounts_pkey ON public.categories_amounts USING btree (id);

alter table "public"."categories_amounts" add constraint "categories_amounts_pkey" PRIMARY KEY using index "categories_amounts_pkey";

alter table "public"."categories_amounts" add constraint "categories_amounts_category_id_fkey" FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE RESTRICT not valid;

alter table "public"."categories_amounts" validate constraint "categories_amounts_category_id_fkey";

alter table "public"."categories_amounts" add constraint "categories_amounts_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE RESTRICT not valid;

alter table "public"."categories_amounts" validate constraint "categories_amounts_user_id_fkey";

create policy "Enable delete for users based on id"
on "public"."categories_amounts"
as permissive
for delete
to authenticated
using ((auth.uid() = user_id));


create policy "Enable insert for authenticated users only"
on "public"."categories_amounts"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable select for users based on id"
on "public"."categories_amounts"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "Enable update for users based on id"
on "public"."categories_amounts"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));



