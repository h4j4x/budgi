create extension if not exists "moddatetime" with schema "extensions";


create table "public"."wallets_balances" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "updated_at" timestamp with time zone not null default now(),
    "wallet_id" bigint not null,
    "from_date" date not null,
    "to_date" date not null,
    "balance" double precision not null default '0'::double precision,
    "user_id" uuid not null
);


alter table "public"."wallets_balances" enable row level security;

CREATE UNIQUE INDEX wallets_balances_pkey ON public.wallets_balances USING btree (id);

alter table "public"."wallets_balances" add constraint "wallets_balances_pkey" PRIMARY KEY using index "wallets_balances_pkey";

alter table "public"."wallets_balances" add constraint "wallets_balances_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE RESTRICT not valid;

alter table "public"."wallets_balances" validate constraint "wallets_balances_user_id_fkey";

alter table "public"."wallets_balances" add constraint "wallets_balances_wallet_id_fkey" FOREIGN KEY (wallet_id) REFERENCES wallets(id) ON DELETE RESTRICT not valid;

alter table "public"."wallets_balances" validate constraint "wallets_balances_wallet_id_fkey";

grant delete on table "public"."wallets_balances" to "anon";

grant insert on table "public"."wallets_balances" to "anon";

grant references on table "public"."wallets_balances" to "anon";

grant select on table "public"."wallets_balances" to "anon";

grant trigger on table "public"."wallets_balances" to "anon";

grant truncate on table "public"."wallets_balances" to "anon";

grant update on table "public"."wallets_balances" to "anon";

grant delete on table "public"."wallets_balances" to "authenticated";

grant insert on table "public"."wallets_balances" to "authenticated";

grant references on table "public"."wallets_balances" to "authenticated";

grant select on table "public"."wallets_balances" to "authenticated";

grant trigger on table "public"."wallets_balances" to "authenticated";

grant truncate on table "public"."wallets_balances" to "authenticated";

grant update on table "public"."wallets_balances" to "authenticated";

grant delete on table "public"."wallets_balances" to "service_role";

grant insert on table "public"."wallets_balances" to "service_role";

grant references on table "public"."wallets_balances" to "service_role";

grant select on table "public"."wallets_balances" to "service_role";

grant trigger on table "public"."wallets_balances" to "service_role";

grant truncate on table "public"."wallets_balances" to "service_role";

grant update on table "public"."wallets_balances" to "service_role";

create policy "Enable delete for users based on id"
on "public"."wallets_balances"
as permissive
for delete
to authenticated
using ((auth.uid() = user_id));


create policy "Enable insert for authenticated users only"
on "public"."wallets_balances"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable read access for users based on id"
on "public"."wallets_balances"
as permissive
for select
to authenticated
using ((auth.uid() = user_id));


create policy "Enable update for users based on id"
on "public"."wallets_balances"
as permissive
for update
to authenticated
using ((auth.uid() = user_id))
with check ((auth.uid() = user_id));


CREATE TRIGGER wallets_balances_updated_at BEFORE UPDATE ON public.wallets_balances FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


